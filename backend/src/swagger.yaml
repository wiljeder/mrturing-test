openapi: 3.0.0
info:
  title: Organization Management API
  version: 1.0.0
  description: API for managing users and organizations

servers:
  - url: http://localhost:3000
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Organization:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        ownerId:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string

    CreateOrganizationRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string

    UpdateOrganizationRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string

    PaginationResponse:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        totalItems:
          type: integer
        totalPages:
          type: integer

paths:
  /api/auth/login:
    post:
      summary: Login user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"

  /api/users:
    post:
      summary: Create new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    get:
      summary: Get users list
      tags:
        - Users
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          description: Items per page
        - in: query
          name: name
          schema:
            type: string
          description: Filter by name
        - in: query
          name: email
          schema:
            type: string
          description: Filter by email
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  pagination:
                    $ref: "#/components/schemas/PaginationResponse"

  /api/users/me:
    get:
      summary: Get current user
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Current user information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /api/organizations:
    post:
      summary: Create organization
      tags:
        - Organizations
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrganizationRequest"
      responses:
        "201":
          description: Organization created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"

    get:
      summary: Get organizations list
      tags:
        - Organizations
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        "200":
          description: List of organizations
          content:
            application/json:
              schema:
                type: object
                properties:
                  organizations:
                    type: array
                    items:
                      $ref: "#/components/schemas/Organization"
                  pagination:
                    $ref: "#/components/schemas/PaginationResponse"

  /api/organizations/{organizationId}/users:
    get:
      summary: Get organization users
      tags:
        - Organizations
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: organizationId
          required: true
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: email
          schema:
            type: string
      responses:
        "200":
          description: List of organization users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  pagination:
                    $ref: "#/components/schemas/PaginationResponse"

  /api/organizations/{organizationId}/users/{userId}:
    post:
      summary: Add user to organization
      tags:
        - Organizations
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: organizationId
          required: true
          schema:
            type: integer
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        "201":
          description: User added to organization successfully

    delete:
      summary: Remove user from organization
      tags:
        - Organizations
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: organizationId
          required: true
          schema:
            type: integer
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User removed from organization successfully

  /api/organizations/{organizationId}/active:
    put:
      summary: Set active organization
      tags:
        - Organizations
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: organizationId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Organization set as active successfully

security:
  - BearerAuth: []
